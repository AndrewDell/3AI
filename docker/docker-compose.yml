# docker/docker-compose.yml
# This docker-compose file defines the multi-container setup for the 3AI application.
# It configures the main application service along with volume mounts for persistent storage.

version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "0.0.0.0:5000:5000"
    volumes:
      - ../:/app
      - ../logs:/app/logs
    environment:
      - FLASK_APP=src/ui/dashboard.py
      - FLASK_ENV=development
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DEBUG=1
    networks:
      - agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "pip install -r requirements-prod.txt &&
             python -m flask run --host=0.0.0.0 --port=5000"

  server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    ports:
      - "0.0.0.0:3001:3001"
    volumes:
      - ../:/app
      - ../logs:/app/logs
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - API_URL=http://api:5000
    networks:
      - agent_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: >
      sh -c "npm install && npm run dev-socket"

  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "0.0.0.0:3000:3000"
    volumes:
      - ../:/app
      - ../logs:/app/logs
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:3001
    networks:
      - agent_network
    depends_on:
      - server
    command: >
      sh -c "npm install && npm run dev"

networks:
  agent_network:
    driver: bridge

volumes:
  logs-volume:
    driver: local
